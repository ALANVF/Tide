extensions {\\.c \\.h}

syntax {
	keywords {
		Keywords {
			goto break return continue asm namespace while for if else do switch case default
			struct union enum
		}
		
		Constants {
			true false NULL
			__LINE__ __FILE__ __DATE__ __TIME__ __STDC__ __STDC_VERSION__
			CHAR_BIT MB_LEN_MAX MB_CUR_MAX
			UCHAR_MAX UINT_MAX ULONG_MAX USHRT_MAX
			CHAR_MIN INT_MIN LONG_MIN SHRT_MIN
			CHAR_MAX INT_MAX LONG_MAX SHRT_MAX
			SCHAR_MIN SINT_MIN SLONG_MIN SSHRT_MIN
			SCHAR_MAX SINT_MAX SLONG_MAX SSHRT_MAX
			__func__ __VA_ARGS__
			LLONG_MIN LLONG_MAX ULLONG_MAX
			INT8_MIN INT16_MIN INT32_MIN INT64_MIN
			INT8_MAX INT16_MAX INT32_MAX INT64_MAX
			UINT8_MAX UINT16_MAX UINT32_MAX UINT64_MAX
			INT_LEAST8_MIN INT_LEAST16_MIN INT_LEAST32_MIN INT_LEAST64_MIN
			INT_LEAST8_MAX INT_LEAST16_MAX INT_LEAST32_MAX INT_LEAST64_MAX
			UINT_LEAST8_MAX UINT_LEAST16_MAX UINT_LEAST32_MAX UINT_LEAST64_MAX
			INT_FAST8_MIN INT_FAST16_MIN INT_FAST32_MIN INT_FAST64_MIN
			INT_FAST8_MAX INT_FAST16_MAX INT_FAST32_MAX INT_FAST64_MAX
			UINT_FAST8_MAX UINT_FAST16_MAX UINT_FAST32_MAX UINT_FAST64_MAX
			INTPTR_MIN INTPTR_MAX UINTPTR_MAX
			INTMAX_MIN INTMAX_MAX UINTMAX_MAX
			PTRDIFF_MIN PTRDIFF_MAX SIG_ATOMIC_MIN SIG_ATOMIC_MAX
			SIZE_MAX WCHAR_MIN WCHAR_MAX WINT_MIN WINT_MAX
			stderr stdin stdout
		}
		
		Types {
			int char void bool u_char u_int short long double float typedef unsigned signed
			static register auto volatile extern const inline
			size_t int32_t
		}
		
		Builtin-Functions {
			printf sprintf scanf sscanf
			sizeof typeof typeid
			free malloc alloc realloc
		}
		
		Globals {
			this
		}
	}
	
	symbols {
		Operators {+-*/%^~.&|}
		Symbols {!=<>,;:}
		Wrappers  {()[]{}}
	}
	
	numbers {
		Number {\y\d+(?:\.\d+)?\y}
	}
	
	strings {
		Double-Quoted    {".*?"}
		Single-Quoted    {'.'}
	}
	
	regexes {
		Macro {^\s*#\s*(?:define|undef|include|exclude|import|pragma|ifdef|ifndef|if|elseif|else|endif).*?}
	}
	
	comments {
		Comment {//.*}
	}
	
	multi-line-comment {/\\* \\*/}
}

colors {
	basic {
		Default-Text DefaultText
		Default-Background DefaultBackground
		Default-Cursor DefaultCursor
	}
	
	keywords {
		Keywords Keyword1
		Constants Constant2
		Types Constant1
		Builtin-Functions Function1
		Globals Keyword1
	}
	
	symbols {
		Operators Operator1
		Symbols Operator2
		Wrappers Operator3
	}
	
	numbers {
		Number Number1
	}
	
	strings {
		Double-Quoted String1
		Single-Quoted String1
	}
	
	regexes {
		Macro Keyword4
	}
	
	comments {
		Comment Comment1
	}
	
	multi-line-comment Comment1
}
