extensions {.rb}

syntax {
	keywords {
		Keywords {
			begin case when then class def do end for if elsif else module unless until while
			break next redo rescue ensure retry return super yield loop exit
			include gem undef alias defined?
		}
		
		Constants {
			true false nil
		}
		
		Word-Operators {
			not and or
			in
		}
		
		Builtin-Functions {
			each map eval gsub index match open print push pop puts pp p read rindex scan sleep join split lines chars sub times downto upto step chr ord succ prec
			to_i to_int to_f to_s to_r to_f to_c to_enum to_str to_sym to_ary to_a to_h to_hash to_json
			inspect reverse reverse! rotate rotate?
			
			raise fail catch throw
			eval class_eval instance_eval module_eval class_exec instance_exec module_exec
			public protected private public_class_method private_class_method public_constant private_constant module_function
			attr attr_accessor attr_reader attr_writerattr attr_accessor attr_reader attr_writer
			autoload extend load prepend refine require require_relative using
			callcc larrer lambda proc
		}
		
		Special-Keywords {
			new
			self
		}
	}
	
	symbols {
		Operators {+-*/%^~.,=<>&|;}
		Wrappers  {()[]{}}
	}
	
	numbers {
		Number {\y\d+(?:\.\d+)?\y}
		Hex-Number {0x[a-f0-9]{2}_[a-f0-9]{6}}
	}
	
	regexes {
		Variable {(?:\$|\@{1,2})\w+}
		Constant {\m[A-Z]\w*}
		Symbol {(?x)
			\w+\:(?!\:)
			|
			\:(?!\:)
				(?:
					(?:
						(?:
							\$|\@{1,2})?
						[a-zA-Z_]\w*[\!\?\=]?)
					|
					(?:
						[\+\-\*/\%\^\!\&\|]
						|
						\<\<?
						|
						\>\>?
						|
						\={2,3}
						|
						\!\=\=?
						|
						[\=\!]\~
						|
						[\+\-\~\!]\@
						|
						\<\=
						|
						\>\=
						|
						\<\=\>
						|
						\[\]\=?)
				)
		}
	}
	
	strings {
		Char-String      {(?!\w)\?.}
		Regex            {/(?!\s+).+?/(?=\.|\,|\)|\]|\}|;|\:|[a-z]+|$$|\sdo\y|\ydo\y)}
		Double-Quoted    {".*?"}
		Single-Quoted    {'.*?'}
		Shell-Quoted     {`.*?`}
	}
	
	comments {
		Comment {(?=\n|\r|^|^^|;|,)\s*#.*}
	}
	
	multi-line-comment {\\=begin \\=end}
}

colors {
	basic {
		Default-Text DefaultText
		Default-Background DefaultBackground
		Default-Cursor DefaultCursor
	}
	
	keywords {
		Keywords Keyword1
		Constants Constant1
		Word-Operators Operator1
		Builtin-Functions Function1
		Special-Keywords Keyword3
	}
	
	symbols {
		Operators Operator2
		Wrappers Operator3
	}
	
	numbers {
		Number Number1
		Hex-Number Number1
	}
	
	regexes {
		Variable Keyword2
		Constant Constant1
		Symbol Keyword4
	}
	
	strings {
		Char-String String1
		Regex String3
		Double-Quoted String1
		Single-Quoted String1
		Shell-Quoted String1
	}
	
	comments {
		Comment Comment1
	}
	
	multi-line-comment Comment1
}


